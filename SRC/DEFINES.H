#ifndef __DEFINES_H_
#define __DEFINES_H_

#include <malloc.h>
#include <dos.h>
#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define FALSE 0
#define TRUE  1
#define _32K   32000	
#define _64K   64000
#define	_128K  128000
#define _256K  256000

#define MIN(a,b) 	((a<b)?(a):(b))
#define min3(a,b,c) 	(min(min(a,b),min(b,c)))
#define MAX(a,b) 	((a>b)?(a):(b))
#define max3(a,b,c) 	(max(max(a,b),max(b,c)))
#define mid3(a,b,c) 	(max3(min(a,b),min(b,c),min(a,c))) 
//#define sgn(_x)   	(((_x) != 0) ? ((_x)>0 ? 1 : -1) : 0)
#define ABS(a)   	(((a)<0)?(-(a)):(a))
#define random(x) 	(rand()%(x))

#ifndef byte
typedef unsigned char byte;
#endif
#ifndef word
typedef unsigned short word;
#endif
#ifndef dword
typedef unsigned long dword;
#endif

typedef char    int8;
typedef short   int16;
typedef long    int32;
typedef unsigned char  uint8;
typedef unsigned short uint16;
typedef unsigned long  uint32;

typedef long real;

real mul(real a,real b);
#pragma aux mul =             \
        "IMUL EDX            "\
        "SHRD EAX,EDX,10H    "\
        parm caller [EAX][EDX]\
	value [EAX];

real rdiv(real a,real b);
#pragma aux rdiv =            \
        "SHRD EAX,EDX,10H    "\
        "SAR EDX,10H         "\
        "IDIV EBX            "\
        parm caller [EDX][EBX]\
	modify [EAX EBX EDX]  \
	value [EAX];

uint32 modp2(uint32 number,uint32 modulus);
#pragma aux modp2 =		  \
	"DEC EBX		 "\
	"AND EAX,EBX		 "\
	parm [EAX] [EBX]	  \
	modify [EAX EBX]	  \
	value [EAX];

uint32 quotp2(uint32 number,uint32 divider);
#pragma aux quotp2 = 		  \
	"NEG EBX		 "\
	"AND EAX,EBX		 "\
	parm [EAX] [EBX]	  \
	modify [EAX EBX]	  \
	value [EAX];

uint32 divp2(uint32 number,uint32 divider);
#pragma aux divp2 =               \
       "LP:                      "\
       "ROR EBX,1                "\
       "JC ENDLP                 "\
       "SHR EAX,1                "\
       "JMP LP                   "\
       "ENDLP:                   "\
       parm [EAX] [EBX]           \
       modify [EAX EBX]           \
       value [EAX];


#define add(a,b)    ((a)+(b))
#define sub(a,b)    ((a)-(b))
#define sqr(a)      (mul((a),(a)))
#define D2R(x)      ((x)*65536)
#define R2D(x)      ((x)/65536.0)
#define I2R(x)      ((x)<<16)
#define R2I(x)      ((x)>>16)
#define RL_PI       D2R(M_PI)
#define RL_PI_2     D2R(M_PI_2)
#define RL_PI_4     D2R(M_PI_4)
#define RL_1_PI     D2R(M_1_PI)
#define RL_2_PI     D2R(M_2_PI)
#define RL_1_SQRTPI D2R(M_1_SQRTPI)
#define RL_2_SQRTPI D2R(M_2_SQRTPI)
#define RL_SQRT2    D2R(M_SQRT2)
#define RL_1_SQRT2  D2R(M_SQRT_2)
#define RL_SQRT2_2  D2R(M_SQRT_2)

real sintbl[360]={
  0x00000000, 0x00000477, 0x000008ef, 0x00000d65, 0x000011db, 0x0000164f, 0x00001ac2, 0x00001f32, 0x000023a0, 0x0000280c,
  0x00002c74, 0x000030d8, 0x00003539, 0x00003996, 0x00003dee, 0x00004241, 0x00004690, 0x00004ad8, 0x00004f1b, 0x00005358,
  0x0000578e, 0x00005bbe, 0x00005fe6, 0x00006406, 0x0000681f, 0x00006c30, 0x00007039, 0x00007438, 0x0000782f, 0x00007c1c,
  0x00007fff, 0x000083d9, 0x000087a8, 0x00008b6d, 0x00008f27, 0x000092d5, 0x00009679, 0x00009a10, 0x00009d9b, 0x0000a11b,
  0x0000a48d, 0x0000a7f3, 0x0000ab4c, 0x0000ae97, 0x0000b1d5, 0x0000b504, 0x0000b826, 0x0000bb39, 0x0000be3e, 0x0000c134,
  0x0000c41b, 0x0000c6f3, 0x0000c9bb, 0x0000cc73, 0x0000cf1b, 0x0000d1b3, 0x0000d43b, 0x0000d6b3, 0x0000d919, 0x0000db6f,
  0x0000ddb3, 0x0000dfe7, 0x0000e208, 0x0000e419, 0x0000e617, 0x0000e803, 0x0000e9de, 0x0000eba6, 0x0000ed5b, 0x0000eeff,
  0x0000f08f, 0x0000f20d, 0x0000f378, 0x0000f4d0, 0x0000f615, 0x0000f746, 0x0000f865, 0x0000f970, 0x0000fa67, 0x0000fb4b,
  0x0000fc1c, 0x0000fcd9, 0x0000fd82, 0x0000fe17, 0x0000fe98, 0x0000ff06, 0x0000ff60, 0x0000ffa6, 0x0000ffd8, 0x0000fff6,
  0x00010000, 0x0000fff6, 0x0000ffd8, 0x0000ffa6, 0x0000ff60, 0x0000ff06, 0x0000fe98, 0x0000fe17, 0x0000fd82, 0x0000fcd9,
  0x0000fc1c, 0x0000fb4b, 0x0000fa67, 0x0000f970, 0x0000f865, 0x0000f746, 0x0000f615, 0x0000f4d0, 0x0000f378, 0x0000f20d,
  0x0000f08f, 0x0000eeff, 0x0000ed5b, 0x0000eba6, 0x0000e9de, 0x0000e803, 0x0000e617, 0x0000e419, 0x0000e208, 0x0000dfe7,
  0x0000ddb3, 0x0000db6f, 0x0000d919, 0x0000d6b3, 0x0000d43b, 0x0000d1b3, 0x0000cf1b, 0x0000cc73, 0x0000c9bb, 0x0000c6f3,
  0x0000c41b, 0x0000c134, 0x0000be3e, 0x0000bb39, 0x0000b826, 0x0000b504, 0x0000b1d5, 0x0000ae97, 0x0000ab4c, 0x0000a7f3,
  0x0000a48d, 0x0000a11b, 0x00009d9b, 0x00009a10, 0x00009679, 0x000092d5, 0x00008f27, 0x00008b6d, 0x000087a8, 0x000083d9,
  0x00008000, 0x00007c1c, 0x0000782f, 0x00007438, 0x00007039, 0x00006c30, 0x0000681f, 0x00006406, 0x00005fe6, 0x00005bbe,
  0x0000578e, 0x00005358, 0x00004f1b, 0x00004ad8, 0x00004690, 0x00004241, 0x00003dee, 0x00003996, 0x00003539, 0x000030d8,
  0x00002c74, 0x0000280c, 0x000023a0, 0x00001f32, 0x00001ac2, 0x0000164f, 0x000011db, 0x00000d65, 0x000008ef, 0x00000477,
  0x00000000, 0xfffffb89, 0xfffff711, 0xfffff29b, 0xffffee25, 0xffffe9b1, 0xffffe53e, 0xffffe0ce, 0xffffdc60, 0xffffd7f4,
  0xffffd38c, 0xffffcf28, 0xffffcac7, 0xffffc66a, 0xffffc212, 0xffffbdbf, 0xffffb970, 0xffffb528, 0xffffb0e5, 0xffffaca8,
  0xffffa872, 0xffffa442, 0xffffa01a, 0xffff9bfa, 0xffff97e1, 0xffff93d0, 0xffff8fc7, 0xffff8bc8, 0xffff87d1, 0xffff83e4,
  0xffff8001, 0xffff7c27, 0xffff7858, 0xffff7493, 0xffff70d9, 0xffff6d2b, 0xffff6987, 0xffff65f0, 0xffff6265, 0xffff5ee5,
  0xffff5b73, 0xffff580d, 0xffff54b4, 0xffff5169, 0xffff4e2b, 0xffff4afc, 0xffff47da, 0xffff44c7, 0xffff41c2, 0xffff3ecc,
  0xffff3be5, 0xffff390d, 0xffff3645, 0xffff338d, 0xffff30e5, 0xffff2e4d, 0xffff2bc5, 0xffff294d, 0xffff26e7, 0xffff2491,
  0xffff224d, 0xffff2019, 0xffff1df8, 0xffff1be7, 0xffff19e9, 0xffff17fd, 0xffff1622, 0xffff145a, 0xffff12a5, 0xffff1101,
  0xffff0f71, 0xffff0df3, 0xffff0c88, 0xffff0b30, 0xffff09eb, 0xffff08ba, 0xffff079b, 0xffff0690, 0xffff0599, 0xffff04b5,
  0xffff03e4, 0xffff0327, 0xffff027e, 0xffff01e9, 0xffff0168, 0xffff00fa, 0xffff00a0, 0xffff005a, 0xffff0028, 0xffff000a,
  0xffff0000, 0xffff000a, 0xffff0028, 0xffff005a, 0xffff00a0, 0xffff00fa, 0xffff0168, 0xffff01e9, 0xffff027e, 0xffff0327,
  0xffff03e4, 0xffff04b5, 0xffff0599, 0xffff0690, 0xffff079b, 0xffff08ba, 0xffff09eb, 0xffff0b30, 0xffff0c88, 0xffff0df3,
  0xffff0f71, 0xffff1101, 0xffff12a5, 0xffff145a, 0xffff1622, 0xffff17fd, 0xffff19e9, 0xffff1be7, 0xffff1df8, 0xffff2019,
  0xffff224d, 0xffff2491, 0xffff26e7, 0xffff294d, 0xffff2bc5, 0xffff2e4d, 0xffff30e5, 0xffff338d, 0xffff3645, 0xffff390d,
  0xffff3be5, 0xffff3ecc, 0xffff41c2, 0xffff44c7, 0xffff47da, 0xffff4afc, 0xffff4e2b, 0xffff5169, 0xffff54b4, 0xffff580d,
  0xffff5b73, 0xffff5ee5, 0xffff6265, 0xffff65f0, 0xffff6987, 0xffff6d2b, 0xffff70d9, 0xffff7493, 0xffff7858, 0xffff7c27,
  0xffff8000, 0xffff83e4, 0xffff87d1, 0xffff8bc8, 0xffff8fc7, 0xffff93d0, 0xffff97e1, 0xffff9bfa, 0xffffa01a, 0xffffa442,
  0xffffa872, 0xffffaca8, 0xffffb0e5, 0xffffb528, 0xffffb970, 0xffffbdbf, 0xffffc212, 0xffffc66a, 0xffffcac7, 0xffffcf28,
  0xffffd38c, 0xffffd7f4, 0xffffdc60, 0xffffe0ce, 0xffffe53e, 0xffffe9b1, 0xffffee25, 0xfffff29b, 0xfffff711, 0xfffffb89
};
real costbl[360]={
  0x00010000, 0x0000fff6, 0x0000ffd8, 0x0000ffa6, 0x0000ff60, 0x0000ff06, 0x0000fe98, 0x0000fe17, 0x0000fd82, 0x0000fcd9,
  0x0000fc1c, 0x0000fb4b, 0x0000fa67, 0x0000f970, 0x0000f865, 0x0000f746, 0x0000f615, 0x0000f4d0, 0x0000f378, 0x0000f20d,
  0x0000f08f, 0x0000eeff, 0x0000ed5b, 0x0000eba6, 0x0000e9de, 0x0000e803, 0x0000e617, 0x0000e419, 0x0000e208, 0x0000dfe7,
  0x0000ddb3, 0x0000db6f, 0x0000d919, 0x0000d6b3, 0x0000d43b, 0x0000d1b3, 0x0000cf1b, 0x0000cc73, 0x0000c9bb, 0x0000c6f3,
  0x0000c41b, 0x0000c134, 0x0000be3e, 0x0000bb39, 0x0000b826, 0x0000b504, 0x0000b1d5, 0x0000ae97, 0x0000ab4c, 0x0000a7f3,
  0x0000a48d, 0x0000a11b, 0x00009d9b, 0x00009a10, 0x00009679, 0x000092d5, 0x00008f27, 0x00008b6d, 0x000087a8, 0x000083d9,
  0x00008000, 0x00007c1c, 0x0000782f, 0x00007438, 0x00007039, 0x00006c30, 0x0000681f, 0x00006406, 0x00005fe6, 0x00005bbe,
  0x0000578e, 0x00005358, 0x00004f1b, 0x00004ad8, 0x00004690, 0x00004241, 0x00003dee, 0x00003996, 0x00003539, 0x000030d8,
  0x00002c74, 0x0000280c, 0x000023a0, 0x00001f32, 0x00001ac2, 0x0000164f, 0x000011db, 0x00000d65, 0x000008ef, 0x00000477,
  0x00000000, 0xfffffb89, 0xfffff711, 0xfffff29b, 0xffffee25, 0xffffe9b1, 0xffffe53e, 0xffffe0ce, 0xffffdc60, 0xffffd7f4,
  0xffffd38c, 0xffffcf28, 0xffffcac7, 0xffffc66a, 0xffffc212, 0xffffbdbf, 0xffffb970, 0xffffb528, 0xffffb0e5, 0xffffaca8,
  0xffffa872, 0xffffa442, 0xffffa01a, 0xffff9bfa, 0xffff97e1, 0xffff93d0, 0xffff8fc7, 0xffff8bc8, 0xffff87d1, 0xffff83e4,
  0xffff8001, 0xffff7c27, 0xffff7858, 0xffff7493, 0xffff70d9, 0xffff6d2b, 0xffff6987, 0xffff65f0, 0xffff6265, 0xffff5ee5,
  0xffff5b73, 0xffff580d, 0xffff54b4, 0xffff5169, 0xffff4e2b, 0xffff4afc, 0xffff47da, 0xffff44c7, 0xffff41c2, 0xffff3ecc,
  0xffff3be5, 0xffff390d, 0xffff3645, 0xffff338d, 0xffff30e5, 0xffff2e4d, 0xffff2bc5, 0xffff294d, 0xffff26e7, 0xffff2491,
  0xffff224d, 0xffff2019, 0xffff1df8, 0xffff1be7, 0xffff19e9, 0xffff17fd, 0xffff1622, 0xffff145a, 0xffff12a5, 0xffff1101,
  0xffff0f71, 0xffff0df3, 0xffff0c88, 0xffff0b30, 0xffff09eb, 0xffff08ba, 0xffff079b, 0xffff0690, 0xffff0599, 0xffff04b5,
  0xffff03e4, 0xffff0327, 0xffff027e, 0xffff01e9, 0xffff0168, 0xffff00fa, 0xffff00a0, 0xffff005a, 0xffff0028, 0xffff000a,
  0xffff0000, 0xffff000a, 0xffff0028, 0xffff005a, 0xffff00a0, 0xffff00fa, 0xffff0168, 0xffff01e9, 0xffff027e, 0xffff0327,
  0xffff03e4, 0xffff04b5, 0xffff0599, 0xffff0690, 0xffff079b, 0xffff08ba, 0xffff09eb, 0xffff0b30, 0xffff0c88, 0xffff0df3,
  0xffff0f71, 0xffff1101, 0xffff12a5, 0xffff145a, 0xffff1622, 0xffff17fd, 0xffff19e9, 0xffff1be7, 0xffff1df8, 0xffff2019,
  0xffff224d, 0xffff2491, 0xffff26e7, 0xffff294d, 0xffff2bc5, 0xffff2e4d, 0xffff30e5, 0xffff338d, 0xffff3645, 0xffff390d,
  0xffff3be5, 0xffff3ecc, 0xffff41c2, 0xffff44c7, 0xffff47da, 0xffff4afc, 0xffff4e2b, 0xffff5169, 0xffff54b4, 0xffff580d,
  0xffff5b73, 0xffff5ee5, 0xffff6265, 0xffff65f0, 0xffff6987, 0xffff6d2b, 0xffff70d9, 0xffff7493, 0xffff7858, 0xffff7c27,
  0xffff8000, 0xffff83e4, 0xffff87d1, 0xffff8bc8, 0xffff8fc7, 0xffff93d0, 0xffff97e1, 0xffff9bfa, 0xffffa01a, 0xffffa442,
  0xffffa872, 0xffffaca8, 0xffffb0e5, 0xffffb528, 0xffffb970, 0xffffbdbf, 0xffffc212, 0xffffc66a, 0xffffcac7, 0xffffcf28,
  0xffffd38c, 0xffffd7f4, 0xffffdc60, 0xffffe0ce, 0xffffe53e, 0xffffe9b1, 0xffffee25, 0xfffff29b, 0xfffff711, 0xfffffb89,
  0x00000000, 0x00000477, 0x000008ef, 0x00000d65, 0x000011db, 0x0000164f, 0x00001ac2, 0x00001f32, 0x000023a0, 0x0000280c,
  0x00002c74, 0x000030d8, 0x00003539, 0x00003996, 0x00003dee, 0x00004241, 0x00004690, 0x00004ad8, 0x00004f1b, 0x00005358,
  0x0000578e, 0x00005bbe, 0x00005fe6, 0x00006406, 0x0000681f, 0x00006c30, 0x00007039, 0x00007438, 0x0000782f, 0x00007c1c,
  0x00007fff, 0x000083d9, 0x000087a8, 0x00008b6d, 0x00008f27, 0x000092d5, 0x00009679, 0x00009a10, 0x00009d9b, 0x0000a11b,
  0x0000a48d, 0x0000a7f3, 0x0000ab4c, 0x0000ae97, 0x0000b1d5, 0x0000b504, 0x0000b826, 0x0000bb39, 0x0000be3e, 0x0000c134,
  0x0000c41b, 0x0000c6f3, 0x0000c9bb, 0x0000cc73, 0x0000cf1b, 0x0000d1b3, 0x0000d43b, 0x0000d6b3, 0x0000d919, 0x0000db6f,
  0x0000ddb3, 0x0000dfe7, 0x0000e208, 0x0000e419, 0x0000e617, 0x0000e803, 0x0000e9de, 0x0000eba6, 0x0000ed5b, 0x0000eeff,
  0x0000f08f, 0x0000f20d, 0x0000f378, 0x0000f4d0, 0x0000f615, 0x0000f746, 0x0000f865, 0x0000f970, 0x0000fa67, 0x0000fb4b,
  0x0000fc1c, 0x0000fcd9, 0x0000fd82, 0x0000fe17, 0x0000fe98, 0x0000ff06, 0x0000ff60, 0x0000ffa6, 0x0000ffd8, 0x0000fff6
  };

#define SIN(_a)   (sintbl[(_a)<0 ? 360+(_a):(_a)])
#define COS(_a)   (costbl[(_a)<0 ? 360+(_a):(_a)])


#endif